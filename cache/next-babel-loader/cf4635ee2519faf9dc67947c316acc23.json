{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { category } from '../data/category';\nexport function getCategory() {\n  var root = category.filter(item => item.parent_id === 0);\n  makeMenuTree(root); // console.log(root)\n  // console.log(JSON.stringify(root));\n\n  return root;\n}\n\nfunction makeMenuTree(root) {\n  root.map(rootitem => {\n    const branch = category.filter(item => rootitem.id === item.parent_id);\n    makeMenuTree(branch);\n    Object.assign(rootitem, _objectSpread(_objectSpread({}, rootitem), {}, {\n      children: branch\n    }));\n  });\n}","map":null,"metadata":{},"sourceType":"module"}